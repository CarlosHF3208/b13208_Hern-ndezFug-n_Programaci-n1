/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package numero;

/**
 *
 * @author Carlos
 *//**
 * Representacion de numero por tiras de caracteres
 *
 * @author Programacion-I
 * @version (2019-Set-06)
 */

class Numero {

/**
 * Variables de instacia (instance variables)
 */
   private StringBuffer numero;	// Representa el numero
   private int largo;


/**
 * Constructor de un Numero a partir de un String
 * @param       String s        numero de caracteres con el numero a crear
 * @return      Numeros         una instacia de la clase Numeros
 */
   public Numero( String numero ) {
       this.numero = new StringBuffer(  numero );
       this.largo = this.numero.length();
   }


/**
 * Constructor de un   Numero a partir de un entero
 * @param       int v   entero para construir el numero
 * @return      Numero         una instacia de la clase Numero
 */
    Numero( int v ) {
        this.numero = new StringBuffer ( Integer.toString( v ) );
        this.largo = this.numero.length();
    }


/**
 * Devuelve el valor de la tira de caracteres
 * @return      String          una numero de caracteres con la representacion del numero
 */
    public String getNumero() {
        return this.numero.toString();
    }


/**
 * Devuelve el largo en caracteres del numero almacenado
 * @return      int             entero con la longitud del numero almacenado
 */
   public int getLargo() {
       return this.largo;
   }


/**
 * Cambia la tira de caracteres que representa el Numero
 * @param	String	valor nuevo valor por asignar al Numero
 */
   public void setNumero( String valor ) {
      this.numero = new StringBuffer( valor );
      this.largo = this.numero.length();
   }


/**
 * Devuelve una representacion legible para los miembros de esta clase
 */
   public String toString() {
      return numero.toString();
   }


/**
 * Realiza la suma de dos numeros de esta clase
 * @param	Numero	el segundo sumando
 * @return	Numero	el resultado de la suma
 */
   
   
   //ESTA SUMA SOLO SUMA POSITIVOS. PARA SUMAR UN POSITIVO CON UN NEGATIVO (O VICEVERSA), EL METODO RESTA CONTIENE TODO LO NECESARIO. 
   //SIMPLEMENTE TOME a+(-b) como a-b y (-a)+b como b-a; donde a,b son numeros enteros positivos.
   public Numero Sumar( Numero sumando ) {

      int tam1, tam2;
      int maximo, digito1, digito2, suma, llevo;
      StringBuffer resultado;

     tam1 = this.numero.length();
     tam2 = sumando.numero.length();
     maximo = tam1;
      if ( tam1 < tam2 ) {
         maximo = tam2;
      }
      maximo--;	// Restamos uno para acceder al arreglo de caracteres

      llevo = 0;
      resultado = new StringBuffer( "" );
      for ( int digitos = 0; digitos <= maximo; digitos++ ) {
         digito1 = this.deme( digitos );
         digito2 = sumando.deme( digitos );
         suma = digito1 + digito2 + llevo;
         if ( suma < 10 ) {
            llevo = 0;
         }
         else {
            llevo = 1;
            suma = suma - 10;
         }
         resultado.insert( 0, Integer.toString( suma ) );
      }

      if ( llevo > 0 ) {
         resultado.insert( 0, Integer.toString( llevo ) );
      }

      return new Numero( resultado.toString() );

   }


/**
 * Determina si un Numero es igual a otro, comparando los digitos de las potencias mayores a las menores
 * @param	Numero	otro, el Numero con el que se compara (this == otro)
 * @return	boolean si los numeros son iguales
 */
public boolean esIgual( Numero otro ) {
  
  boolean Igual = true;
  boolean todavia=true;
  int tam1 = this.numero.length();
  int  tam2 = otro.numero.length();
  int   maximo = tam1;
  if ( tam1 < tam2 ) {
         maximo = tam2;}
  
   
   //Nota para mí mismo: De acá se puede aprender algo importante sobre cómo posicionar composiciones de if, for y while. Estudiarlo
   for(int i= maximo-1;i>=0;){ while(todavia==true){
   if( this.deme(i)>otro.deme(i)){Igual=false; todavia =false;i=i-1;}
   else if( this.deme(i)<otro.deme(i)){Igual=false; todavia =false;i=i-1;}
   else if( i==0 && Igual==true && todavia==true){ todavia =false;i=i-1;}
   else if( this.deme(i)==otro.deme(i)){i=i-1;}                             };
                        }
return Igual;
    
    


                                    }


/**
 * Determina si un Numero es mayor que otro, comparando los digitos de las potencias mayores a las menores
 * @param	Numero	otro, el Numero con el que se compara (this > otro)
 * @return	boolean si el Numero es mayor que el que se pasa como parametro
 */



public boolean esMayor( Numero otro ) { //TODAS LAS DESIGUALDADES ESTÁ LISTAS Y FUNCIONAN TANTO PARA POSITIVOS COMO NEGATIVOS
  boolean mayor = false;
  boolean todavia=true;
  int tam1 = this.numero.length();
  int  tam2 = otro.numero.length();
  int   maximo = tam1;
  if ( tam1 < tam2 ) {
         maximo = tam2;}
  
   
   //Nota para mí mismo: De acá se puede aprender algo importante sobre cómo posicionar composiciones de if, for y while. Estudiarlo
   for(int i= maximo-1;i>=0;i=i-1){ while(todavia==true){
   if( this.deme(i)>otro.deme(i)){mayor=true; todavia =false;}
   else if( this.deme(i)<otro.deme(i)){mayor=false; todavia =false;}
   else if( i==0 && mayor==false && todavia==true){ todavia =false;}
   else if( this.deme(i)==otro.deme(i)){i=i-1;}                                    };
                        }
return mayor;
}
/**
 * Determina si un Numero es menor que otro, utilizando los otros metodos definidos
 * @param	Numero	otro, el Numero con el que se compara (this < otro)
 * @return	boolean si el Numero es mayor que el que se pasa como parametro
 */
public boolean esMenor( Numero otro ) {
   boolean resultado = false;

   resultado = ( ! this.esIgual( otro ) && ! this.esMayor( otro ) );

   return resultado;

}


/**
 * Determina si un Numero es negativo
 * @return	boolean si el Numero es negativo
 */
public boolean esNegativo() { //listo y funciona
   boolean resultado = false;
    int tam1 = this.numero.length()-1; 
    
  if(this.deme(tam1)<0){resultado=true;}

   return resultado;

}




/**
/**
 * Resta dos Numeros representados por esta clase
 * Requiere que el primer Numero sea mayor que el segundo, de otra manera el resultado es incorrecto
 * @param	Numero sustraendo Numero a restar del primero
 * @return	Numero el resultado de la resta
 */
   public Numero RestarMayoraMenor( Numero sustraendo ) {//Este está listo y sirve para positivos. Es la base para los demás.

     
             
       
       int tam1, tam2;
      int maximo, digito1, digito2, resta, pido;
      StringBuffer diferencia;
      diferencia = new StringBuffer( "" ); 
       
      
    
      tam1 = this.numero.length();
      tam2 = sustraendo.numero.length();
      maximo = tam1;
      if ( tam1 < tam2 ) {
         maximo = tam2;}

      pido = 0;
     
      for ( int digitos = 0; digitos < maximo; digitos++ ) 
      {  digito1 = this.deme( digitos );
         digito2 = sustraendo.deme( digitos );
         digito1 = digito1 - pido;
                  if ( digito1 < digito2 )
                  { resta = 10 + digito1 - digito2;
            pido = 1;} 
                  else { resta = digito1 - digito2;  pido = 0;}

         diferencia.insert( 0, Integer.toString( resta ) );	// Agrega al inicio de la tira

      }

       
      return new Numero( diferencia.toString() );

   }

   
   
   
   
   
   
   
    public Numero Restar( Numero otro ) {
      
      
      Numero resta; 
       
       
       if( !this.esNegativo() && ! otro.esNegativo() ){ //Este caso de ambos positicos está listo, ya sea uno mayor que otro o viceversa.
        
           if(this.esMayor(otro)){
   resta=this.RestarMayoraMenor(otro);} else{resta=otro.RestarMayoraMenor(this);resta.numero.insert(0, '-');} 
       
       }
       else if( this.esNegativo() &&  !otro.esNegativo()){  //Es un caso único pues siempre se suman. Por tanto está listo
           
   resta=this.Abs().Sumar(otro.Abs());
   resta.numero.insert(0, '-');
       
       } 
       
       else if( !this.esNegativo() &&  otro.esNegativo()){ 
           
           if(this.esMayor(otro.Abs())){resta=this.Abs().Sumar(otro.Abs()); }else{ resta=otro.Abs().Sumar(this.Abs());};
           
  
                                                        }
       
       else{ 
           
           if(this.Abs().esMayor(otro.Abs()))  {resta=this.Abs().RestarMayoraMenor(otro.Abs());resta.numero.insert(0, '-');}
           else{resta=otro.Abs().RestarMayoraMenor(this.Abs()); } 
       
           }; //ESTOS SON LOS CASOS EN QUE AMBOS SON NEGATIVOS. Está listo
       
        
   return resta;     
     

   }
   
   
   
   
   

   
   
   
        
      
       public Numero Abs() { //El valor absoluto está listo y funciona
   StringBuffer absoluto;
      int suma;
      int digito;
      absoluto = new StringBuffer( "" );
     
   
      if(   this.deme( this.numero.length()-1)>=0       ){
      
      for ( int digitos = 0; digitos < this.numero.length(); digitos++) {
          suma = this.deme(digitos);
          absoluto.insert(0, Integer.toString( suma ) );
     
      }
      }
      
      if(this.deme( this.numero.length()-1)<0){
  
          
      for ( int digitos = 0; digitos <this.numero.length()-1; digitos++) {
         digito= this.deme( digitos );
            suma = this.deme(digitos);
          absoluto.insert(0, Integer.toString( suma ) );
      
             
          
      }
      
      
      

   }
      
      
      
        
       
    return new Numero( absoluto.toString() );   
       }

      
      
      
      
      
    public Numero Multiplicar( Numero factor2 ) {

     ;
      StringBuffer resultado= new StringBuffer( "" );  ;
      Numero previo=new Numero(0);

           
      int j=1;
      Numero numeroesp = new Numero(j);
      boolean i=true;
      while(  i==true  ){
          
      Numero contador= factor2.Abs().Restar(numeroesp);
      i=(contador.esMayor(new Numero(0)));
      
            
      previo=previo.Sumar(this.Abs());
          j=j+1;
      numeroesp = new Numero(j);
      
     
      };
         
        ;
               
                
      if(factor2.esNegativo() && !this.esNegativo() ){  previo.numero.insert(0, '-');}
      else if(!factor2.esNegativo() && this.esNegativo() ){  previo.numero.insert(0, '-');} 
      
   return new Numero( previo.toString() );
   
    }  
      
      
      
   
   
   
/**
 * Retorna el valor 10 a la potencia p del Numero
 * Verifica que el rango sea correcto, sino devuelve 0
 * @param	int p	potencia de 10 en la que se quiere solicitar el digito
 * @return	int	el valor del digito en la posicion 10 a la potencia p
**/

    public int deme( int p ) {

        int i, r;
        if ( p >= largo ) {
            r = 0;
        } else {
           i = largo - p - 1;
           r = numero.charAt( i ) - '0' ;	// Se le resta "0" para obtener el valor como un entero
        }

        return r;

    }


/**
 * Metodo principal de la clase, para intedemeraccion con el mundo exterior
 * @param	String args[] tiras de caracteres con los parametros del programa
 */
   public static void main( String args [] ) {

       Numero numero1 = new Numero( -150);
       Numero numero2 = new Numero( -1500);
       Numero numero3 = new Numero( 200 );
       Numero numero4 = new Numero( 10 );
         Numero numero5 = new Numero( -5 );

     System.out.println("A continuacion algunas pruebas del codigo");
     System.out.println(numero1.toString()+" menos "+numero2.toString()+" es igual a "+numero1.Restar(numero2));
     System.out.println(numero2.toString()+" menos "+numero1.toString()+" es igual a "+numero2.Restar(numero1));
     System.out.println(numero3.toString()+" menos "+numero1.toString()+" es igual a "+numero3.Restar(numero1));
     System.out.println(numero3.toString()+" menos "+numero2.toString()+" es igual a "+numero3.Restar(numero2));

     
     System.out.println("Note ademas que "+ numero4.toString()+" multiplicado por "+numero5.toString()+" es igual a "+numero4.Multiplicar(numero5));

     System.out.println("Y finalmente que "+ numero3.toString()+" multiplicado por "+numero4.toString()+" es igual a "+numero3.Multiplicar(numero4));
     
     
     
     
   }
}
